// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.6
// source: proto/kanbanpb/status.proto

package kanbanpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UploadRequestCode int32

const (
	UploadRequestCode_SendingKanban      UploadRequestCode = 0
	UploadRequestCode_SendingFile_CONT   UploadRequestCode = 1
	UploadRequestCode_SendingFile_EOF    UploadRequestCode = 2
	UploadRequestCode_SendingFile_FAILED UploadRequestCode = 3
	UploadRequestCode_EOS                UploadRequestCode = 4
)

// Enum value maps for UploadRequestCode.
var (
	UploadRequestCode_name = map[int32]string{
		0: "SendingKanban",
		1: "SendingFile_CONT",
		2: "SendingFile_EOF",
		3: "SendingFile_FAILED",
		4: "EOS",
	}
	UploadRequestCode_value = map[string]int32{
		"SendingKanban":      0,
		"SendingFile_CONT":   1,
		"SendingFile_EOF":    2,
		"SendingFile_FAILED": 3,
		"EOS":                4,
	}
)

func (x UploadRequestCode) Enum() *UploadRequestCode {
	p := new(UploadRequestCode)
	*p = x
	return p
}

func (x UploadRequestCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadRequestCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_kanbanpb_status_proto_enumTypes[0].Descriptor()
}

func (UploadRequestCode) Type() protoreflect.EnumType {
	return &file_proto_kanbanpb_status_proto_enumTypes[0]
}

func (x UploadRequestCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadRequestCode.Descriptor instead.
func (UploadRequestCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{0}
}

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Failed  UploadStatusCode = 1
	UploadStatusCode_OK      UploadStatusCode = 2
)

// Enum value maps for UploadStatusCode.
var (
	UploadStatusCode_name = map[int32]string{
		0: "Unknown",
		1: "Failed",
		2: "OK",
	}
	UploadStatusCode_value = map[string]int32{
		"Unknown": 0,
		"Failed":  1,
		"OK":      2,
	}
)

func (x UploadStatusCode) Enum() *UploadStatusCode {
	p := new(UploadStatusCode)
	*p = x
	return p
}

func (x UploadStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_kanbanpb_status_proto_enumTypes[1].Descriptor()
}

func (UploadStatusCode) Type() protoreflect.EnumType {
	return &file_proto_kanbanpb_status_proto_enumTypes[1]
}

func (x UploadStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadStatusCode.Descriptor instead.
func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{1}
}

type InitializeType int32

const (
	InitializeType_START_SERVICE                InitializeType = 0
	InitializeType_START_SERVICE_WITHOUT_KANBAN InitializeType = 1
)

// Enum value maps for InitializeType.
var (
	InitializeType_name = map[int32]string{
		0: "START_SERVICE",
		1: "START_SERVICE_WITHOUT_KANBAN",
	}
	InitializeType_value = map[string]int32{
		"START_SERVICE":                0,
		"START_SERVICE_WITHOUT_KANBAN": 1,
	}
)

func (x InitializeType) Enum() *InitializeType {
	p := new(InitializeType)
	*p = x
	return p
}

func (x InitializeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitializeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_kanbanpb_status_proto_enumTypes[2].Descriptor()
}

func (InitializeType) Type() protoreflect.EnumType {
	return &file_proto_kanbanpb_status_proto_enumTypes[2]
}

func (x InitializeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitializeType.Descriptor instead.
func (InitializeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{2}
}

type ResponseStatus int32

const (
	ResponseStatus_SUCCESS ResponseStatus = 0
	ResponseStatus_FAILED  ResponseStatus = 1
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	ResponseStatus_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_kanbanpb_status_proto_enumTypes[3].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_proto_kanbanpb_status_proto_enumTypes[3]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{3}
}

// Cカンバンデータ
type StatusKanban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt        string           `protobuf:"bytes,1,opt,name=startAt,proto3" json:"startAt,omitempty"`
	FinishAt       string           `protobuf:"bytes,2,opt,name=finishAt,proto3" json:"finishAt,omitempty"`
	NextDeviceName string           `protobuf:"bytes,3,opt,name=nextDeviceName,proto3" json:"nextDeviceName,omitempty"`
	ConnectionKey  string           `protobuf:"bytes,4,opt,name=connectionKey,proto3" json:"connectionKey,omitempty"`
	ProcessNumber  int32            `protobuf:"varint,5,opt,name=processNumber,proto3" json:"processNumber,omitempty"`
	PriorSuccess   bool             `protobuf:"varint,6,opt,name=priorSuccess,proto3" json:"priorSuccess,omitempty"`
	DataPath       string           `protobuf:"bytes,7,opt,name=dataPath,proto3" json:"dataPath,omitempty"`
	FileList       []string         `protobuf:"bytes,8,rep,name=fileList,proto3" json:"fileList,omitempty"`
	Metadata       *structpb.Struct `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StatusKanban) Reset() {
	*x = StatusKanban{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kanbanpb_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusKanban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusKanban) ProtoMessage() {}

func (x *StatusKanban) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kanbanpb_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusKanban.ProtoReflect.Descriptor instead.
func (*StatusKanban) Descriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{0}
}

func (x *StatusKanban) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *StatusKanban) GetFinishAt() string {
	if x != nil {
		return x.FinishAt
	}
	return ""
}

func (x *StatusKanban) GetNextDeviceName() string {
	if x != nil {
		return x.NextDeviceName
	}
	return ""
}

func (x *StatusKanban) GetConnectionKey() string {
	if x != nil {
		return x.ConnectionKey
	}
	return ""
}

func (x *StatusKanban) GetProcessNumber() int32 {
	if x != nil {
		return x.ProcessNumber
	}
	return 0
}

func (x *StatusKanban) GetPriorSuccess() bool {
	if x != nil {
		return x.PriorSuccess
	}
	return false
}

func (x *StatusKanban) GetDataPath() string {
	if x != nil {
		return x.DataPath
	}
	return ""
}

func (x *StatusKanban) GetFileList() []string {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *StatusKanban) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SendKanban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName  string        `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	DeviceAddr  string        `protobuf:"bytes,2,opt,name=deviceAddr,proto3" json:"deviceAddr,omitempty"`
	NextService string        `protobuf:"bytes,3,opt,name=nextService,proto3" json:"nextService,omitempty"`
	NextNumber  int32         `protobuf:"varint,4,opt,name=nextNumber,proto3" json:"nextNumber,omitempty"`
	AfterKanban *StatusKanban `protobuf:"bytes,5,opt,name=afterKanban,proto3" json:"afterKanban,omitempty"`
}

func (x *SendKanban) Reset() {
	*x = SendKanban{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kanbanpb_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendKanban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendKanban) ProtoMessage() {}

func (x *SendKanban) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kanbanpb_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendKanban.ProtoReflect.Descriptor instead.
func (*SendKanban) Descriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{1}
}

func (x *SendKanban) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SendKanban) GetDeviceAddr() string {
	if x != nil {
		return x.DeviceAddr
	}
	return ""
}

func (x *SendKanban) GetNextService() string {
	if x != nil {
		return x.NextService
	}
	return ""
}

func (x *SendKanban) GetNextNumber() int32 {
	if x != nil {
		return x.NextNumber
	}
	return 0
}

func (x *SendKanban) GetAfterKanban() *StatusKanban {
	if x != nil {
		return x.AfterKanban
	}
	return nil
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context []byte `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RefNum  int32  `protobuf:"varint,3,opt,name=refNum,proto3" json:"refNum,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kanbanpb_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kanbanpb_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{2}
}

func (x *Chunk) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Chunk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chunk) GetRefNum() int32 {
	if x != nil {
		return x.RefNum
	}
	return 0
}

type SendContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    UploadRequestCode `protobuf:"varint,1,opt,name=code,proto3,enum=kanbanpb.UploadRequestCode" json:"code,omitempty"`
	Context *anypb.Any        `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *SendContext) Reset() {
	*x = SendContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kanbanpb_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendContext) ProtoMessage() {}

func (x *SendContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kanbanpb_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendContext.ProtoReflect.Descriptor instead.
func (*SendContext) Descriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{3}
}

func (x *SendContext) GetCode() UploadRequestCode {
	if x != nil {
		return x.Code
	}
	return UploadRequestCode_SendingKanban
}

func (x *SendContext) GetContext() *anypb.Any {
	if x != nil {
		return x.Context
	}
	return nil
}

type UploadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	StatusCode UploadStatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=kanbanpb.UploadStatusCode" json:"statusCode,omitempty"`
}

func (x *UploadStatus) Reset() {
	*x = UploadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kanbanpb_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadStatus) ProtoMessage() {}

func (x *UploadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kanbanpb_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadStatus.ProtoReflect.Descriptor instead.
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{4}
}

func (x *UploadStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UploadStatus) GetStatusCode() UploadStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return UploadStatusCode_Unknown
}

// --------------------- Status Kanban Server ---------------------------
// サービス起動時通知
type InitializeService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitType         InitializeType `protobuf:"varint,1,opt,name=initType,proto3,enum=kanbanpb.InitializeType" json:"initType,omitempty"`
	MicroserviceName string         `protobuf:"bytes,2,opt,name=microserviceName,proto3" json:"microserviceName,omitempty"`
	ProcessNumber    int32          `protobuf:"varint,3,opt,name=processNumber,proto3" json:"processNumber,omitempty"`
}

func (x *InitializeService) Reset() {
	*x = InitializeService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kanbanpb_status_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeService) ProtoMessage() {}

func (x *InitializeService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kanbanpb_status_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeService.ProtoReflect.Descriptor instead.
func (*InitializeService) Descriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{5}
}

func (x *InitializeService) GetInitType() InitializeType {
	if x != nil {
		return x.InitType
	}
	return InitializeType_START_SERVICE
}

func (x *InitializeService) GetMicroserviceName() string {
	if x != nil {
		return x.MicroserviceName
	}
	return ""
}

func (x *InitializeService) GetProcessNumber() int32 {
	if x != nil {
		return x.ProcessNumber
	}
	return 0
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MicroserviceName string        `protobuf:"bytes,1,opt,name=microserviceName,proto3" json:"microserviceName,omitempty"`
	Message          *StatusKanban `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kanbanpb_status_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kanbanpb_status_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{6}
}

func (x *Request) GetMicroserviceName() string {
	if x != nil {
		return x.MicroserviceName
	}
	return ""
}

func (x *Request) GetMessage() *StatusKanban {
	if x != nil {
		return x.Message
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=kanbanpb.ResponseStatus" json:"status,omitempty"`
	Error  string         `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kanbanpb_status_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kanbanpb_status_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_kanbanpb_status_proto_rawDescGZIP(), []int{7}
}

func (x *Response) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_SUCCESS
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_proto_kanbanpb_status_proto protoreflect.FileDescriptor

var file_proto_kanbanpb_status_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6b,
	0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc9, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4b, 0x61, 0x6e, 0x62, 0x61,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x01, 0x0a,
	0x0a, 0x53, 0x65, 0x6e, 0x64, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x22, 0x4d, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x66, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x66, 0x4e, 0x75, 0x6d, 0x22, 0x6e, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x64, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x69, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x72, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x45, 0x4f, 0x46, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x53, 0x10, 0x04, 0x2a, 0x33, 0x0a, 0x10, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x02,
	0x2a, 0x45, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x4b,
	0x41, 0x4e, 0x42, 0x41, 0x4e, 0x10, 0x01, 0x2a, 0x29, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x32, 0x85, 0x01, 0x0a, 0x06, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0x46, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0x1b,
	0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x16, 0x2e, 0x6b, 0x61,
	0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4b, 0x61, 0x6e,
	0x62, 0x61, 0x6e, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x4b, 0x61, 0x6e,
	0x62, 0x61, 0x6e, 0x12, 0x11, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9a, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x6e, 0x64, 0x41, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x11, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x14, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x1a, 0x14, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x45, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x16, 0x2e,
	0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x01, 0x42, 0x31, 0x5a, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x61, 0x74, 0x6f, 0x6e, 0x61, 0x69,
	0x6f, 0x2f, 0x61, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6b, 0x61, 0x6e, 0x62, 0x61, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_kanbanpb_status_proto_rawDescOnce sync.Once
	file_proto_kanbanpb_status_proto_rawDescData = file_proto_kanbanpb_status_proto_rawDesc
)

func file_proto_kanbanpb_status_proto_rawDescGZIP() []byte {
	file_proto_kanbanpb_status_proto_rawDescOnce.Do(func() {
		file_proto_kanbanpb_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_kanbanpb_status_proto_rawDescData)
	})
	return file_proto_kanbanpb_status_proto_rawDescData
}

var file_proto_kanbanpb_status_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_kanbanpb_status_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_kanbanpb_status_proto_goTypes = []interface{}{
	(UploadRequestCode)(0),    // 0: kanbanpb.UploadRequestCode
	(UploadStatusCode)(0),     // 1: kanbanpb.UploadStatusCode
	(InitializeType)(0),       // 2: kanbanpb.InitializeType
	(ResponseStatus)(0),       // 3: kanbanpb.ResponseStatus
	(*StatusKanban)(nil),      // 4: kanbanpb.StatusKanban
	(*SendKanban)(nil),        // 5: kanbanpb.SendKanban
	(*Chunk)(nil),             // 6: kanbanpb.Chunk
	(*SendContext)(nil),       // 7: kanbanpb.SendContext
	(*UploadStatus)(nil),      // 8: kanbanpb.UploadStatus
	(*InitializeService)(nil), // 9: kanbanpb.InitializeService
	(*Request)(nil),           // 10: kanbanpb.Request
	(*Response)(nil),          // 11: kanbanpb.Response
	(*structpb.Struct)(nil),   // 12: google.protobuf.Struct
	(*anypb.Any)(nil),         // 13: google.protobuf.Any
}
var file_proto_kanbanpb_status_proto_depIdxs = []int32{
	12, // 0: kanbanpb.StatusKanban.metadata:type_name -> google.protobuf.Struct
	4,  // 1: kanbanpb.SendKanban.afterKanban:type_name -> kanbanpb.StatusKanban
	0,  // 2: kanbanpb.SendContext.code:type_name -> kanbanpb.UploadRequestCode
	13, // 3: kanbanpb.SendContext.context:type_name -> google.protobuf.Any
	1,  // 4: kanbanpb.UploadStatus.statusCode:type_name -> kanbanpb.UploadStatusCode
	2,  // 5: kanbanpb.InitializeService.initType:type_name -> kanbanpb.InitializeType
	4,  // 6: kanbanpb.Request.message:type_name -> kanbanpb.StatusKanban
	3,  // 7: kanbanpb.Response.status:type_name -> kanbanpb.ResponseStatus
	9,  // 8: kanbanpb.Kanban.ReceiveKanban:input_type -> kanbanpb.InitializeService
	10, // 9: kanbanpb.Kanban.SendKanban:input_type -> kanbanpb.Request
	5,  // 10: kanbanpb.SendAnything.ServiceBrokerConn:input_type -> kanbanpb.SendKanban
	7,  // 11: kanbanpb.SendAnything.SendToOtherDevices:input_type -> kanbanpb.SendContext
	4,  // 12: kanbanpb.Kanban.ReceiveKanban:output_type -> kanbanpb.StatusKanban
	11, // 13: kanbanpb.Kanban.SendKanban:output_type -> kanbanpb.Response
	5,  // 14: kanbanpb.SendAnything.ServiceBrokerConn:output_type -> kanbanpb.SendKanban
	8,  // 15: kanbanpb.SendAnything.SendToOtherDevices:output_type -> kanbanpb.UploadStatus
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_kanbanpb_status_proto_init() }
func file_proto_kanbanpb_status_proto_init() {
	if File_proto_kanbanpb_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_kanbanpb_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusKanban); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kanbanpb_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendKanban); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kanbanpb_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kanbanpb_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kanbanpb_status_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kanbanpb_status_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kanbanpb_status_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kanbanpb_status_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_kanbanpb_status_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_kanbanpb_status_proto_goTypes,
		DependencyIndexes: file_proto_kanbanpb_status_proto_depIdxs,
		EnumInfos:         file_proto_kanbanpb_status_proto_enumTypes,
		MessageInfos:      file_proto_kanbanpb_status_proto_msgTypes,
	}.Build()
	File_proto_kanbanpb_status_proto = out.File
	file_proto_kanbanpb_status_proto_rawDesc = nil
	file_proto_kanbanpb_status_proto_goTypes = nil
	file_proto_kanbanpb_status_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KanbanClient is the client API for Kanban service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KanbanClient interface {
	// 最新のCカンバンを取得する
	ReceiveKanban(ctx context.Context, in *InitializeService, opts ...grpc.CallOption) (Kanban_ReceiveKanbanClient, error)
	SendKanban(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type kanbanClient struct {
	cc grpc.ClientConnInterface
}

func NewKanbanClient(cc grpc.ClientConnInterface) KanbanClient {
	return &kanbanClient{cc}
}

func (c *kanbanClient) ReceiveKanban(ctx context.Context, in *InitializeService, opts ...grpc.CallOption) (Kanban_ReceiveKanbanClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kanban_serviceDesc.Streams[0], "/kanbanpb.Kanban/ReceiveKanban", opts...)
	if err != nil {
		return nil, err
	}
	x := &kanbanReceiveKanbanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kanban_ReceiveKanbanClient interface {
	Recv() (*StatusKanban, error)
	grpc.ClientStream
}

type kanbanReceiveKanbanClient struct {
	grpc.ClientStream
}

func (x *kanbanReceiveKanbanClient) Recv() (*StatusKanban, error) {
	m := new(StatusKanban)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kanbanClient) SendKanban(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/kanbanpb.Kanban/SendKanban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KanbanServer is the server API for Kanban service.
type KanbanServer interface {
	// 最新のCカンバンを取得する
	ReceiveKanban(*InitializeService, Kanban_ReceiveKanbanServer) error
	SendKanban(context.Context, *Request) (*Response, error)
}

// UnimplementedKanbanServer can be embedded to have forward compatible implementations.
type UnimplementedKanbanServer struct {
}

func (*UnimplementedKanbanServer) ReceiveKanban(*InitializeService, Kanban_ReceiveKanbanServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveKanban not implemented")
}
func (*UnimplementedKanbanServer) SendKanban(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKanban not implemented")
}

func RegisterKanbanServer(s *grpc.Server, srv KanbanServer) {
	s.RegisterService(&_Kanban_serviceDesc, srv)
}

func _Kanban_ReceiveKanban_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitializeService)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KanbanServer).ReceiveKanban(m, &kanbanReceiveKanbanServer{stream})
}

type Kanban_ReceiveKanbanServer interface {
	Send(*StatusKanban) error
	grpc.ServerStream
}

type kanbanReceiveKanbanServer struct {
	grpc.ServerStream
}

func (x *kanbanReceiveKanbanServer) Send(m *StatusKanban) error {
	return x.ServerStream.SendMsg(m)
}

func _Kanban_SendKanban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanServer).SendKanban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kanbanpb.Kanban/SendKanban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanServer).SendKanban(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kanban_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kanbanpb.Kanban",
	HandlerType: (*KanbanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendKanban",
			Handler:    _Kanban_SendKanban_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveKanban",
			Handler:       _Kanban_ReceiveKanban_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/kanbanpb/status.proto",
}

// SendAnythingClient is the client API for SendAnything service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendAnythingClient interface {
	ServiceBrokerConn(ctx context.Context, opts ...grpc.CallOption) (SendAnything_ServiceBrokerConnClient, error)
	SendToOtherDevices(ctx context.Context, opts ...grpc.CallOption) (SendAnything_SendToOtherDevicesClient, error)
}

type sendAnythingClient struct {
	cc grpc.ClientConnInterface
}

func NewSendAnythingClient(cc grpc.ClientConnInterface) SendAnythingClient {
	return &sendAnythingClient{cc}
}

func (c *sendAnythingClient) ServiceBrokerConn(ctx context.Context, opts ...grpc.CallOption) (SendAnything_ServiceBrokerConnClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SendAnything_serviceDesc.Streams[0], "/kanbanpb.SendAnything/ServiceBrokerConn", opts...)
	if err != nil {
		return nil, err
	}
	x := &sendAnythingServiceBrokerConnClient{stream}
	return x, nil
}

type SendAnything_ServiceBrokerConnClient interface {
	Send(*SendKanban) error
	Recv() (*SendKanban, error)
	grpc.ClientStream
}

type sendAnythingServiceBrokerConnClient struct {
	grpc.ClientStream
}

func (x *sendAnythingServiceBrokerConnClient) Send(m *SendKanban) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sendAnythingServiceBrokerConnClient) Recv() (*SendKanban, error) {
	m := new(SendKanban)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sendAnythingClient) SendToOtherDevices(ctx context.Context, opts ...grpc.CallOption) (SendAnything_SendToOtherDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SendAnything_serviceDesc.Streams[1], "/kanbanpb.SendAnything/SendToOtherDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &sendAnythingSendToOtherDevicesClient{stream}
	return x, nil
}

type SendAnything_SendToOtherDevicesClient interface {
	Send(*SendContext) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type sendAnythingSendToOtherDevicesClient struct {
	grpc.ClientStream
}

func (x *sendAnythingSendToOtherDevicesClient) Send(m *SendContext) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sendAnythingSendToOtherDevicesClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SendAnythingServer is the server API for SendAnything service.
type SendAnythingServer interface {
	ServiceBrokerConn(SendAnything_ServiceBrokerConnServer) error
	SendToOtherDevices(SendAnything_SendToOtherDevicesServer) error
}

// UnimplementedSendAnythingServer can be embedded to have forward compatible implementations.
type UnimplementedSendAnythingServer struct {
}

func (*UnimplementedSendAnythingServer) ServiceBrokerConn(SendAnything_ServiceBrokerConnServer) error {
	return status.Errorf(codes.Unimplemented, "method ServiceBrokerConn not implemented")
}
func (*UnimplementedSendAnythingServer) SendToOtherDevices(SendAnything_SendToOtherDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendToOtherDevices not implemented")
}

func RegisterSendAnythingServer(s *grpc.Server, srv SendAnythingServer) {
	s.RegisterService(&_SendAnything_serviceDesc, srv)
}

func _SendAnything_ServiceBrokerConn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SendAnythingServer).ServiceBrokerConn(&sendAnythingServiceBrokerConnServer{stream})
}

type SendAnything_ServiceBrokerConnServer interface {
	Send(*SendKanban) error
	Recv() (*SendKanban, error)
	grpc.ServerStream
}

type sendAnythingServiceBrokerConnServer struct {
	grpc.ServerStream
}

func (x *sendAnythingServiceBrokerConnServer) Send(m *SendKanban) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sendAnythingServiceBrokerConnServer) Recv() (*SendKanban, error) {
	m := new(SendKanban)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SendAnything_SendToOtherDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SendAnythingServer).SendToOtherDevices(&sendAnythingSendToOtherDevicesServer{stream})
}

type SendAnything_SendToOtherDevicesServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*SendContext, error)
	grpc.ServerStream
}

type sendAnythingSendToOtherDevicesServer struct {
	grpc.ServerStream
}

func (x *sendAnythingSendToOtherDevicesServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sendAnythingSendToOtherDevicesServer) Recv() (*SendContext, error) {
	m := new(SendContext)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SendAnything_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kanbanpb.SendAnything",
	HandlerType: (*SendAnythingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServiceBrokerConn",
			Handler:       _SendAnything_ServiceBrokerConn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendToOtherDevices",
			Handler:       _SendAnything_SendToOtherDevices_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/kanbanpb/status.proto",
}
