// Code generated by MockGen. DO NOT EDIT.

// Source: ./config/project.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	config "bitbucket.org/latonaio/aion-core/config"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceConfigContainer is a mock of ServiceConfigContainer interface
type MockServiceConfigContainer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceConfigContainerMockRecorder
}

// MockServiceConfigContainerMockRecorder is the mock recorder for MockServiceConfigContainer
type MockServiceConfigContainerMockRecorder struct {
	mock *MockServiceConfigContainer
}

// NewMockServiceConfigContainer creates a new mock instance
func NewMockServiceConfigContainer(ctrl *gomock.Controller) *MockServiceConfigContainer {
	mock := &MockServiceConfigContainer{ctrl: ctrl}
	mock.recorder = &MockServiceConfigContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceConfigContainer) EXPECT() *MockServiceConfigContainerMockRecorder {
	return m.recorder
}

// GetMicroserviceList mocks base method
func (m *MockServiceConfigContainer) GetMicroserviceList() map[string]*config.Microservice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMicroserviceList")
	ret0, _ := ret[0].(map[string]*config.Microservice)
	return ret0
}

// GetMicroserviceList indicates an expected call of GetMicroserviceList
func (mr *MockServiceConfigContainerMockRecorder) GetMicroserviceList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMicroserviceList", reflect.TypeOf((*MockServiceConfigContainer)(nil).GetMicroserviceList))
}

// GetMicroserviceByName mocks base method
func (m *MockServiceConfigContainer) GetMicroserviceByName(name string) (*config.Microservice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMicroserviceByName", name)
	ret0, _ := ret[0].(*config.Microservice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMicroserviceByName indicates an expected call of GetMicroserviceByName
func (mr *MockServiceConfigContainerMockRecorder) GetMicroserviceByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMicroserviceByName", reflect.TypeOf((*MockServiceConfigContainer)(nil).GetMicroserviceByName), name)
}

// GetNextServiceList mocks base method
func (m *MockServiceConfigContainer) GetNextServiceList(name, connectionKey string) ([]*config.NextServiceSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextServiceList", name, connectionKey)
	ret0, _ := ret[0].([]*config.NextServiceSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextServiceList indicates an expected call of GetNextServiceList
func (mr *MockServiceConfigContainerMockRecorder) GetNextServiceList(name, connectionKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextServiceList", reflect.TypeOf((*MockServiceConfigContainer)(nil).GetNextServiceList), name, connectionKey)
}

// GetDeviceName mocks base method
func (m *MockServiceConfigContainer) GetDeviceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceName indicates an expected call of GetDeviceName
func (mr *MockServiceConfigContainerMockRecorder) GetDeviceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceName", reflect.TypeOf((*MockServiceConfigContainer)(nil).GetDeviceName))
}

// GetDeviceList mocks base method
func (m *MockServiceConfigContainer) GetDeviceList() map[string]*config.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceList")
	ret0, _ := ret[0].(map[string]*config.Device)
	return ret0
}

// GetDeviceList indicates an expected call of GetDeviceList
func (mr *MockServiceConfigContainerMockRecorder) GetDeviceList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceList", reflect.TypeOf((*MockServiceConfigContainer)(nil).GetDeviceList))
}

// LoadConfig mocks base method
func (m *MockServiceConfigContainer) LoadConfig(confPath string, isDocker bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", confPath, isDocker)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadConfig indicates an expected call of LoadConfig
func (mr *MockServiceConfigContainerMockRecorder) LoadConfig(confPath, isDocker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockServiceConfigContainer)(nil).LoadConfig), confPath, isDocker)
}
