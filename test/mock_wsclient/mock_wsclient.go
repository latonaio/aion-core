// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/wsclient/client.go

// Package mock_wsclient is a generated GoMock package.
package mock_wsclient

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWSClient is a mock of WSClient interface
type MockWSClient struct {
	ctrl     *gomock.Controller
	recorder *MockWSClientMockRecorder
}

// MockWSClientMockRecorder is the mock recorder for MockWSClient
type MockWSClientMockRecorder struct {
	mock *MockWSClient
}

// NewMockWSClient creates a new mock instance
func NewMockWSClient(ctrl *gomock.Controller) *MockWSClient {
	mock := &MockWSClient{ctrl: ctrl}
	mock.recorder = &MockWSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWSClient) EXPECT() *MockWSClientMockRecorder {
	return m.recorder
}

// ConnectToServer mocks base method
func (m *MockWSClient) ConnectToServer() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToServer")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToServer indicates an expected call of ConnectToServer
func (mr *MockWSClientMockRecorder) ConnectToServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToServer", reflect.TypeOf((*MockWSClient)(nil).ConnectToServer))
}

// SendMessage mocks base method
func (m *MockWSClient) SendMessage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockWSClientMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockWSClient)(nil).SendMessage), arg0)
}

// Reconnect mocks base method
func (m *MockWSClient) Reconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reconnect")
}

// Reconnect indicates an expected call of Reconnect
func (mr *MockWSClientMockRecorder) Reconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockWSClient)(nil).Reconnect))
}

// Close mocks base method
func (m *MockWSClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockWSClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWSClient)(nil).Close))
}
