// Code generated by MockGen. DO NOT EDIT.
// Source: ./microservice/request_watcher/watcher.go

// Package mock_request_watcher is a generated GoMock package.
package mock_request_watcher

import (
	"bitbucket.org/latonaio/aion-core/internal/microservice"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWatcherAdaptor is a mock of WatcherAdaptor interface
type MockWatcherAdaptor struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherAdaptorMockRecorder
}

// MockWatcherAdaptorMockRecorder is the mock recorder for MockWatcherAdaptor
type MockWatcherAdaptorMockRecorder struct {
	mock *MockWatcherAdaptor
}

// NewMockWatcherAdaptor creates a new mock instance
func NewMockWatcherAdaptor(ctrl *gomock.Controller) *MockWatcherAdaptor {
	mock := &MockWatcherAdaptor{ctrl: ctrl}
	mock.recorder = &MockWatcherAdaptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatcherAdaptor) EXPECT() *MockWatcherAdaptorMockRecorder {
	return m.recorder
}

// watchMicroservice mocks base method
func (m *MockWatcherAdaptor) watchMicroservice(msName string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "watchMicroservice", msName, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// watchMicroservice indicates an expected call of watchMicroservice
func (mr *MockWatcherAdaptorMockRecorder) watchMicroservice(msName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "watchMicroservice", reflect.TypeOf((*MockWatcherAdaptor)(nil).watchMicroservice), msName, number)
}

// sendToNextService mocks base method
func (m *MockWatcherAdaptor) sendToNextService(kanbanPath, msName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendToNextService", kanbanPath, msName)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendToNextService indicates an expected call of sendToNextService
func (mr *MockWatcherAdaptorMockRecorder) sendToNextService(kanbanPath, msName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendToNextService", reflect.TypeOf((*MockWatcherAdaptor)(nil).sendToNextService), kanbanPath, msName)
}

// getReadyToStartCh mocks base method
func (m *MockWatcherAdaptor) getReadyToStartCh() *microservice.MicroserviceCh {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getReadyToStartCh")
	ret0, _ := ret[0].(*microservice.MicroserviceCh)
	return ret0
}

// getReadyToStartCh indicates an expected call of getReadyToStartCh
func (mr *MockWatcherAdaptorMockRecorder) getReadyToStartCh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getReadyToStartCh", reflect.TypeOf((*MockWatcherAdaptor)(nil).getReadyToStartCh))
}
